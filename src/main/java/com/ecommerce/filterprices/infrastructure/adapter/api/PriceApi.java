/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ecommerce.filterprices.infrastructure.adapter.api;

import com.ecommerce.filterprices.domain.model.Price;
import com.ecommerce.filterprices.infrastructure.adapter.api.domain.PriceApiModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import java.time.OffsetDateTime;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Price", description = "the Price API")
@RequestMapping("/price-manager-service/api/v1")
public interface PriceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /prices : Get price Info by filters
     * Retrieve the information of the filtered prices
     *
     * @param applicationDate application date (optional)
     * @param chainId chain id (optional)
     * @param productId product id (optional)
     * @return Price (status code 200)
     *         or Price Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getPrices",
        summary = "Get price Info by filters",
        tags = { "price" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Price", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Price.class))
            }),
            @ApiResponse(responseCode = "404", description = "Price Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/price",
        produces = { "application/json" }
    )
    default ResponseEntity<PriceApiModel> getPrice(
        @Parameter(name = "application_date", description = "application date") @Valid @RequestParam(value = "application_date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Optional<OffsetDateTime> applicationDate,
        @Parameter(name = "chain_id", description = "chain id") @Valid @RequestParam(value = "chain_id", required = false) Optional<Long> chainId,
        @Parameter(name = "product_id", description = "product id") @Valid @RequestParam(value = "product_id", required = false) Optional<Long> productId
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"price_list\" : 5, \"price\" : 1.4658129805029452, \"product_id\" : 0, \"currency\" : \"currency\", \"brand_id\" : 6, \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
